#import "@preview/codly:1.3.0": *
#import "@preview/codly-languages:0.1.1": *
#import "@preview/modern-g7-32:0.1.0": gost, abstract, title-templates, structure-heading

#codly(zebra-fill: none, display-name: false, display-icon: false, number-format: none)

#let pagebreak-state = state("pagebreak", true)

#show pagebreak: it => context {
  if pagebreak-state.get() { it }
}

#show: codly-init.with()

#show: gost.with(
  title-template: title-templates.mai-university-lab,
  performers: (
    (name: "Елисеев П.А.", position: "Студент М3О-221Б-23"),
  ),
  institute: (number: 3, name: "Системы управления, информатика и электроэнергетика"),
  department: (number: 304, name: "Вычислительные машины, системы и сети"),
  report-type: "Архитектура ЭВМ",
  about: ["Организация операционной части\ центрального процессора"],
  bare-subject: true,
  subject: "",
  research: "Вариант №7",
  manager: (name: "Давыдкина Е.А.", position: "Старший преподаватель, инженер кафедры 304"),
  city: "Москва",
) 


#pagebreak-state.update(false)

#structure-heading[Цели и задачи]
Разработать микропрограммное устройство управления для операционной
части ЦП в соответствии с заданием по теме №2.
Использовать горизонтальный и вертикальный подход для реализации
микропрограммного устройства управления.

#figure(
  table(
    columns: 3,
    inset: (x: 20pt, y: 8pt),
    table.header(
      [*1 операнд*], [*2 операнд*], [*Результат*]
    ),
    [Прямая], [Косвенно-регистровая], [1ый операнд]
  ),
  caption: [Способы адресации операндов и запись результата]
) <task>

#structure-heading[Структурная схема]


#pagebreak-state.update(true)

#figure(image("structural.svg"), caption: [Структурная схема операционной части ЦП при выполнении двух адресной команды для построения устройства управления]) <operational>


#structure-heading[Микропрограмма]

*1 этап - выбор команды из памяти:*
```go
V1 РАП:=СчК      
V2 РЧП:=Чт(РАП)   
V3 РК:=РЧП       
V4 СчК:=СчК + n
```
*2 этап - дешифрация кода операции*

*3 этап - формирование ИА и выбор операндов:*

Первый операнд (прямая адресация):
```go
V5 РАП:=РК(R1)   
V2 РЧП:=Чт(РАП)   
V6 Р1:=РЧП       
```
Второй операнд (косвенно-регистровая адресация):
```go
V7 РАРП:=РК(R2)  
V8 РЧРП:=Чт(РАРП) 
V9 РАП:=РЧРП     
V2 РЧП:=Чт(РАП)   
V10 Р2:=РЧП       
```

*4 этап - выполнение операции в АЛУ:*
```go
V11 РС:=Р1 <операция> Р2 
```
*5 этап - запись результатов:*
```go
V5 РАП:=РК(R1)   
V12 РЧП:=РС       
V13 Зп(РАП):=РЧП  
```

#structure-heading[Горизонтальный подход]

Горизонтальное микропрограммирование позволяет совмещать микрооперации во времени. В результате совмещения управляющих сигналов, и, следовательно, соответствующих им микропрограмм, составлена таблица @horizontal-tab. 

#figure(
  table(
    columns: 2,
    inset: (x: 20pt, y: 8pt),
    table.header(
      [*Такт*], [*Вентиль*],
    ),
    [1], [V1],
    [2], [V2],
    [3], [V3, V4],
    [4], [V5, V7],
    [5], [V2, V8],
    [6], [V6, V9],
    [7], [V2],
    [8], [V10],
    [9], [V11, V5],
    [10], [V12],
    [11], [V13]
  ),
  caption: [Срабатывание вентилей по тактам при горизонтальном подходе]
) <horizontal-tab>

Применение горизонтального подхода позволяет достичь максимального параллелизма в выполнении микроопераций, что способствует увеличению производительности процессора. Однако платой за это является увеличенная ширина микрокоманд и, соответственно, больший объем памяти микропрограмм.

#figure(image("horizontal.svg"), caption: [Реализация горизонтального микропрограммного УУ]) <horizontal-pic>

Рисунок @horizontal-pic иллюстрирует работу горизонтального микропрограммного устройства управления (УУ).

#structure-heading[Вертикальный подход]

#figure(
  table(
    columns: 2,
    inset: (x: 20pt, y: 8pt),
    table.header(
      [*Такт*], [*Вентиль*],
    ),
    [1], [V1],
    [2], [V2],
    [3], [V3],
    [4], [V4],
    [5], [V5],
    [6], [V2], 
    [7], [V6],
    [8], [V7],
    [9], [V8],
    [10], [V9],
    [11], [V2],
    [12], [V10],
    [13], [V11],
    [14], [V5],
    [15], [V12],
    [16], [V13],
  ),
  caption: [Срабатывание вентилей по тактам при вертикальном подходе]
) <vertical-tab>

Этот подход приводит к более узким микрокомандам и, следовательно, к меньшему объему памяти микропрограмм. Однако он уступает горизонтальному в быстродействии из-за последовательного выполнения большинства микроопераций и задержек на дешифрацию.

#figure(image("vertical.svg"), caption: [Реализация вертикального микропрограммного УУ]) <vertical-pic>

#pagebreak-state.update(false)

#structure-heading[Вывод]
В ходе данной работы были рассмотрены два основных подхода к построению микропрограммного устройства управления: горизонтальный и вертикальный. Разработана микропрограмма для выполнения двухадресной команды с прямой адресацией первого операнда и косвенно-регистровой адресацией второго, с записью результата на место первого операнда.