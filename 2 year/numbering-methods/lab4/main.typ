#import "@preview/modern-g7-32:0.1.0": gost, abstract, title-templates, structure-heading
#import "@preview/tablex:0.0.8": tablex, hlinex, vlinex
#import "@preview/codly:1.3.0": *
#import "@preview/codly-languages:0.1.1": *
#show: codly-init.with()
#show raw: set text(size: 8pt) // Уменьшил размер шрифта для кода, если нужно

#let lab-num = 4

#codly(zebra-fill: none, number-format: none, display-name: false)

#show: gost.with(
  title-template: title-templates.mai-university-lab,
  performers: (
    (name: "Елисеев П.А.", position: "Студент М3О-221Б-23"),
  ),
  institute: (number: 3, name: "Системы управления, информатика и электроэнергетика"),
  department: (number: 311, name: "Прикладные программные средства и математические методы"),
  about: [О лабораторной работе №#str(lab-num)],
  subject: ["РЕШЕНИЕ СИСТЕМ НЕЛИНЕЙНЫХ УРАВНЕНИЙ"],
  city: "Москва",
  text-size: (default: 13pt, small: 10pt)
)

#set heading(numbering: "1.")

= Задание
Решить систему нелинейных уравнений для варианта №7 с точностью $epsilon=10^(-6)$ методом простых итераций и методом Зейделя.

Вариант №7:
$ cases(
  f_1(x_1, x_2) = sin(x_1 - 1) + x_2 - 0.1 = 0 \
  f_2(x_1, x_2) = x_1 - sin(x_2 + 1) - 0.8 = 0
) $

== Локализация корня

Для нахождения области, содержащей корень, преобразуем систему и построим графики функций:
$ x_2 = 0.1 - sin(x_1 - 1) $
$ x_1 = 0.8 + sin(x_2 + 1) quad => quad x_2 = arcsin(x_1 - 0.8) - 1 $

#raw(read("scripts/graph.py"), lang: "python", block: true)
```python
# Результат выполнения кода (из файла graph_lab4.py):
График сохранен в images/lab4_localization.png
```

#figure(
  image("images/localization.png", width: 70%),
  caption: [Графическая локализация корня системы НЛУ]
) <lab4_fig1>

Из графика @lab4_fig1 видно, что корень системы находится примерно в точке $(1.43, -0.31)$. Выберем в качестве начального приближения $x^(0) = (1.4, -0.3)^T$.

== Подготовка к итерационным методам

Преобразуем систему к виду $x = Phi(x)$:
$ x_1 = 0.8 + sin(x_2 + 1) quad => quad phi_1(x_1, x_2) = 0.8 + sin(x_2 + 1) $
$ x_2 = 0.1 - sin(x_1 - 1) quad => quad phi_2(x_1, x_2) = 0.1 - sin(x_1 - 1) $

Проверим условие сходимости в окрестности точки $x^(0) = (1.4, -0.3)$. Вычислим матрицу Якоби для $Phi(x)$:
$ J_Phi(x) = mat(
  (partial phi_1)/(partial x_1), (partial phi_1)/(partial x_2);
  (partial phi_2)/(partial x_1), (partial phi_2)/(partial x_2)
) = mat(
  0, cos(x_2 + 1);
  -cos(x_1 - 1), 0
) $
В точке $(1.4, -0.3)$:
$ J_Phi(1.4, -0.3) = mat(
  0, cos(-0.3 + 1);
  -cos(1.4 - 1), 0
) = mat(
  0, cos(0.7);
  -cos(0.4), 0
) approx mat(
  0, 0.764842;
  -0.921061, 0
) $
Вычислим норму матрицы $||J_Phi||_infinity$ (максимальная сумма модулей элементов по строкам):
$ q = ||J_Phi||_infinity = max( |0| + |0.764842|, |-0.921061| + |0| ) approx max(0.764842, 0.921061) = 0.921061 $
Так как $q approx 0.9211 < 1$, итерационные методы должны сходиться из точки $(1.4, -0.3)^T$.

== Метод простой итерации (МПИ)

Итерационная формула: $ x^(k+1) = Phi(x^(k)) $
$ x_1^(k+1) = 0.8 + sin(x_2^(k) + 1) $
$ x_2^(k+1) = 0.1 - sin(x_1^(k) - 1) $

Начальное приближение: $ x^(0) = (1.4, -0.3)^T $. Точность $ epsilon = 10^(-6) $.

*Ручной расчет (первая итерация):*
$ x_1^(0) = 1.4, quad x_2^(0) = -0.3 $
$ x_1^(1) = 0.8 + sin(-0.3 + 1) = 0.8 + sin(0.7) approx 0.8 + 0.64421769 = 1.44421769 $
$ x_2^(1) = 0.1 - sin(1.4 - 1) = 0.1 - sin(0.4) approx 0.1 - 0.38941834 = -0.28941834 $
$ x^(1) approx (1.44421769, -0.28941834)^T $
$ ||x^(1) - x^(0)||_(infinity) = max(|1.44421769 - 1.4|, |-0.28941834 - (-0.3)|) $
$ = max(|0.04421769|, |0.01058166|) = 0.04421769 $

*Программная реализация:*
#raw(read("scripts/mpi_system.py"), lang: "python", block: true)
```python
# Результат выполнения кода:
--- Метод Простой Итерации (Система) ---
k=0: x1 = 1.40000000, x2 = -0.30000000
k=1: x1 = 1.44421769, x2 = -0.28941834, ||x^(k+1)-x^(k)||inf = 4.42e-02
k=2: x1 = 1.45227477, x2 = -0.32975162, ||x^(k+1)-x^(k)||inf = 4.03e-02
k=3: x1 = 1.42118065, x2 = -0.33701271, ||x^(k+1)-x^(k)||inf = 3.11e-02
k=4: x1 = 1.41547404, x2 = -0.30883821, ||x^(k+1)-x^(k)||inf = 2.82e-02
k=5: x1 = 1.43743278, x2 = -0.30362369, ||x^(k+1)-x^(k)||inf = 2.20e-02
... (пропущено) ...
k=60: x1 = 1.43071649, x2 = -0.31752225, ||x^(k+1)-x^(k)||inf = 1.60e-06
k=61: x1 = 1.43071772, x2 = -0.31752196, ||x^(k+1)-x^(k)||inf = 1.24e-06
k=62: x1 = 1.43071795, x2 = -0.31752308, ||x^(k+1)-x^(k)||inf = 1.13e-06
k=63: x1 = 1.43071708, x2 = -0.31752329, ||x^(k+1)-x^(k)||inf = 8.73e-07
Сходимость достигнута на итерации k=63.

Корень (МПИ): x1 = 1.4307171, x2 = -0.3175233
Число итераций: 63
```
Метод простой итерации сошелся к решению $x approx (1.4307171, -0.3175233)^T$ за 63 итерации.

#pagebreak()

== Метод Зейделя

Итерационная формула:
$ x_1^(k+1) = 0.8 + sin(x_2^(k) + 1) $
$ x_2^(k+1) = 0.1 - sin(x_1^(k+1) - 1) $

Начальное приближение: $ x^(0) = (1.4, -0.3)^T $. Точность $ epsilon = 10^(-6) $.

*Ручной расчет (первая итерация):*
$ x_1^(0) = 1.4, quad x_2^(0) = -0.3 $
$ x_1^(1) = 0.8 + sin(x_2^(0) + 1) = 0.8 + sin(-0.3 + 1) = 0.8 + sin(0.7) approx 0.8 + 0.64421769 = 1.44421769 $
$ x_2^(1) = 0.1 - sin(x_1^(1) - 1) = 0.1 - sin(1.44421769 - 1) = 0.1 - sin(0.44421769) approx 0.1 - 0.42975162 = -0.32975162 $
$ x^(1) approx (1.44421769, -0.32975162)^T $
$ ||x^(1) - x^(0)||_(infinity) = max(|1.44421769 - 1.4|, |-0.32975162 - (-0.3)|) $
$ = max(|0.04421769|, |-0.02975162|) = 0.04421769 $

*Программная реализация:*
#raw(read("scripts/seidel_system.py"), lang: "python", block: true)
```python
# Результат выполнения кода:
--- Метод Зейделя (Система) ---
k=0: x1 = 1.40000000, x2 = -0.30000000
k=1: x1 = 1.44421769, x2 = -0.32975162, ||x^(k+1)-x^(k)||inf = 4.42e-02
k=2: x1 = 1.42118065, x2 = -0.30883821, ||x^(k+1)-x^(k)||inf = 2.30e-02
k=3: x1 = 1.43743278, x2 = -0.32361537, ||x^(k+1)-x^(k)||inf = 1.63e-02
k=4: x1 = 1.42597771, x2 = -0.31321132, ||x^(k+1)-x^(k)||inf = 1.15e-02
k=5: x1 = 1.43405719, x2 = -0.32055521, ||x^(k+1)-x^(k)||inf = 8.08e-03
... (пропущено) ...
k=25: x1 = 1.43072043, x2 = -0.31752554, ||x^(k+1)-x^(k)||inf = 7.46e-06
k=30: x1 = 1.43071681, x2 = -0.31752225, ||x^(k+1)-x^(k)||inf = 1.30e-06
k=31: x1 = 1.43071772, x2 = -0.31752308, ||x^(k+1)-x^(k)||inf = 9.17e-07
Сходимость достигнута на итерации k=31.

Корень (Зейдель): x1 = 1.4307177, x2 = -0.3175231
Число итераций: 31
```
Метод Зейделя сошелся к решению $x approx (1.4307177, -0.3175231)^T$ за 31 итерацию.

== Вывод

В ходе лабораторной работы №4 была решена система нелинейных уравнений для варианта №7:
$ cases( sin(x_1 - 1) + x_2 - 0.1 = 0 \ x_1 - sin(x_2 + 1) - 0.8 = 0 ) $
с точностью $ epsilon = 10^(-6) $ методом простых итераций (МПИ) и методом Зейделя.

1.  Корень системы был локализован графически, и в качестве начального приближения было выбрано $x^(0)=(1.4, -0.3)^T$.
2.  Система была преобразована к итерационному виду $ x = Phi(x) $:
    $ x_1 = 0.8 + sin(x_2 + 1) $
    $ x_2 = 0.1 - sin(x_1 - 1) $
3.  Проверка условия сходимости $||J_Phi(1.4, -0.3)||_infinity approx 0.9211 < 1$ подтвердила возможность применения итерационных методов.
4.  *Метод простой итерации (МПИ)*:
    -   Начальное приближение: $x^(0)=(1.4, -0.3)^T$.
    -   Результат первой итерации (ручной расчет): $x^(1) approx (1.44421769, -0.28941834)^T$.
    -   Программная реализация показала сходимость за *63 итерации* к решению $x_("МПИ") approx (1.4307171, -0.3175233)^T$.
5.  *Метод Зейделя*:
    -   Начальное приближение: $x^(0)=(1.4, -0.3)^T$.
    -   Результат первой итерации (ручной расчет): $x^(1) approx (1.44421769, -0.32975162)^T$.
    -   Программная реализация показала сходимость за *31 итерацию* к решению $x_("Зейдель") approx (1.4307177, -0.3175231)^T$.

Оба метода успешно нашли корень системы с заданной точностью. Метод Зейделя продемонстрировал более быструю сходимость по сравнению с методом простой итерации для данной системы и выбранного начального приближения. Полученные решения обоими методами практически совпадают, что свидетельствует о корректности вычислений.
